<?xml version="1.0" encoding="utf-8"?>

<!--
  Publishing Service
  ___________________
  
  Defines the configuration for the Publishing Service module.  The Publishing Service module provides an alternative implementation
  of the publishing system, optimised for large, multi-target and geo-distributed deployments.  This is achieved by replacing the 
  PublishManager with a new implementation (Sitecore.Publishing.Service.PublishManager), that delegates most of the work to a service
  component executing in another process.  This service handles the running of publish jobs, the persistence of events relevant for publishing
  and exposes a RESTful HTTP API that powers the UI.  The service must be installed seperately from Sitecore.
  
  The Publishing Service also provides a new, SPEAK-based UI for publishing.
-->
<configuration xmlns:patch="http://www.sitecore.net/xmlconfig/" 
               xmlns:role="http://www.sitecore.net/xmlconfig/role/" 
               xmlns:publishingservice="http://www.sitecore.net/xmlconfig/publishingservice/">
    <sitecore role:require="Standalone or ContentManagement" publishingservice:require="Enabled">

        <!--
    SITECORE SETTINGS
    -->
        <settings>
            <!-- The HTTP endpoint for the service -->
            <setting name="PublishingService.UrlRoot" value="http://ps:80/"></setting>

            <!-- The location of the proxy to send requests through. -->
            <setting name="PublishingService.ProxyAddress" value="http://localhost:8888"></setting>

            <!-- Turn on/off the proxy capability.-->
            <setting name="PublishingService.ProxyEnabled" value="false"></setting>

            <!-- NOTE!! This will be removed in an upcoming version.  Defines the name of the source database. -->
            <setting name="PublishingService.DefaultSourceDatabase" value="master"></setting>

            <!--
                The delay between requests by the Publish Manager to the publishing service for the status of a publish job
                
                This should be in the TimeSpan format e.g. 00:00:01.000 is 1 second
            -->
            <setting name="PublishingService.PublishManagerJobStatusRequestDelay" value="00:00:00.500"></setting>


            <!-- Circuit Breaker Policy Settings -->
            <!-- Name of the policy-->
            <setting name="PublishingService.PolicyName" value="publishing:addoperations"></setting>
            <!-- Number of exceptions to trigger the circuit breaker-->
            <setting name="PublishingService.ExceptionsAllowedBeforeBreak" value="3"></setting>
            <!-- Number of seconds to wait before retrying-->
            <setting name="PublishingService.SecondsBeforeRetrying" value="300"></setting>


            <!-- Interval in secods to configure the Timed Recovery Strategy-->
            <setting name="PublishingService.TimedRecoveryStrategyInterval" value="300"></setting>

            <!-- Item Operation Emitter-->
            <!-- Interval in ms of the buffering window-->
            <setting name="PublishingService.EventBufferingWindowsMaxInterval" value="2000"></setting>
            <!-- The buffer size-->
            <setting name="PublishingService.EventBufferingMaxCount" value="50"></setting>

        </settings>

        <!-- 
    SITECORE DEPENDENCY INJECTION SERVICE CONFIGURATION
    
    Configures the Sitecore.Publishing.Service.PublishManager to replace the default publish manager.
    -->
        <services>
            <configurator type="Sitecore.Publishing.Service.PublishingServiceConfigurator, Sitecore.Publishing.Service" />
        </services>

        <!--
    SITECORE FACTORY CONFIGURATION
    
    Defines the internal service implementations for the module.
    
    -->
        <publishing.service>
            <!-- 
      # Internal services 
      -->
            <targetCacheClearHistory type="Sitecore.Publishing.Service.Pipelines.BulkPublishingEnd.TargetCacheClearHistory, Sitecore.Publishing.Service" singleInstance="true" />

            <api>
                <services>
                    <allowedFullPublishRoles>
                        <!--This is a list of the roles that are able to perform a Full Re-publish-->
                        <role>sitecore\Publishing Service Administrator</role>
                    </allowedFullPublishRoles>
                    <allowedPublishRoles>
                        <!--This is a list of the roles that are able to perform a publish-->
                        <role>sitecore\Publishing Service Administrator</role>
                        <role>sitecore\Sitecore Client Publishing</role>
                    </allowedPublishRoles>
                </services>
            </api>

        </publishing.service>

        <!-- Configure the SPEAK controllers to be accessible. -->
        <api>
            <services>
                <configuration type="Sitecore.Services.Infrastructure.Configuration.ServicesConfiguration, Sitecore.Services.Infrastructure">
                    <allowedControllers hint="list:AddController">
                        <!-- Deploy to CM server only -->
                        <allowedController desc="PublishingJobController">Sitecore.Publishing.Service.Client.Services.Controllers.PublishingJobController, Sitecore.Publishing.Service.Client.Services</allowedController>
                        <allowedController desc="PublishingLanguageController">Sitecore.Publishing.Service.Client.Services.Controllers.PublishingLanguageController, Sitecore.Publishing.Service.Client.Services</allowedController>
                        <allowedController desc="PublishingTargetsController">Sitecore.Publishing.Service.Client.Services.Controllers.PublishingTargetsController, Sitecore.Publishing.Service.Client.Services</allowedController>
                        <allowedController desc="PublishingItemDetailsController">Sitecore.Publishing.Service.Client.Services.Controllers.PublishingItemDetailsController, Sitecore.Publishing.Service.Client.Services</allowedController>
                        <allowedController desc="PublishingMaintenanceController">Sitecore.Publishing.Service.Client.Services.Controllers.PublishingMaintenanceController, Sitecore.Publishing.Service.Client.Services</allowedController>
                    </allowedControllers>
                </configuration>
            </services>
        </api>

        <!-- 
    SITECORE COMMANDS
    -->
        <commands>
            <!-- Override the existing command that launches publish site dialog, to launch the new shiny one. -->
            <command name="system:publish">
                <patch:attribute name="type">Sitecore.Publishing.Service.Client.Commands.PublishSite, Sitecore.Publishing.Service.Client</patch:attribute>
            </command>

            <!-- Launches the publishing dashboard  -->
            <command name="shell:publishdashboard">
                <patch:attribute name="type">Sitecore.Publishing.Service.Client.Commands.OpenPublishDashboard,Sitecore.Publishing.Service.Client</patch:attribute>
            </command>

            <!-- Override the existing comand that launches the publish item dialog, to launch the new shiny one. -->
            <command name="item:publish">
                <patch:attribute name="type">Sitecore.Publishing.Service.Client.Commands.Publish, Sitecore.Publishing.Service.Client</patch:attribute>
            </command>

            <!-- Override the existing comand that launches the publish item dialog, to launch the new shiny one. -->
            <command name="item:publishnow">
                <patch:attribute name="type">Sitecore.Publishing.Service.Client.Commands.Publish, Sitecore.Publishing.Service.Client</patch:attribute>
            </command>
        </commands>

        <!--
    SITECORE EVENTS
    -->
        <events>

            <!-- When an item is saved -->
            <!--Note: un-comment the item:saved event below to enable the re-indexing of all language versions of an item when a shared or unversioned field is modified-->
            <!--
            <event name="item:saved">
                <handler patch:before="*[1]" type="Sitecore.Publishing.Service.Events.ItemSavedHandler, Sitecore.Publishing.Service" method="UpdateItemVariantRevisions" />
            </event>
            -->

            <!-- When a publishing job in the Publish Service starts -->
            <event name="publishingservice:publishbegin">

                <!-- Raises the existing publish:begin event. -->
                <handler type="Sitecore.Publishing.Service.Events.PublishBeginHandler, Sitecore.Publishing.Service" method="TriggerPublishBegin" />
            </event>

            <!-- When a publishing job in the Publish Service completes. -->
            <event name="publishingservice:publishend">

                <!-- When a publish job completes, the results (i.e. changes to the delivery data) are loaded in batches from the Publishing Service into the Sitecore process,
                     and converted into Remote Item events, which are raised in the delivery target Event Queue. -->
                <handler type="Sitecore.Publishing.Service.Events.PublishingJobEndHandler, Sitecore.Publishing.Service" method="StartPublishEndPipeline">

                    <!-- The batch size for querying the manifest results from the Publishing service into the Sitecore process. -->
                    <param name="manifestResultLoadBatchSize">500</param>
                </handler>

                <!-- When a publish job completes, this handler will raise existing 'publish end' events, to maintain compatibility with componenents
                     that integrate with the existing publishing system. -->
                <handler type="Sitecore.Publishing.Service.Events.PublishEndHandler, Sitecore.Publishing.Service" method="TriggerPublishEnd" resolve="true" />
            </event>

        </events>

        <!--
    SITECORE HOOKS
    -->
        <hooks>
            <!-- Registers the Publishing Service job end event with the Event system, to support config file subscriptions. -->
            <hook type="Sitecore.Publishing.Service.Hooks.PublishEventsHook, Sitecore.Publishing.Service" resolve="true" />
        </hooks>

        <!--
    SITECORE PIPELINES
    -->
        <pipelines>

            <!-- Defines the SPEAK JS dependencies -->
            <speak.client.buildMainJS>
                <processor type="Sitecore.Web.Pipelines.BuildMainJs.GetAllFiles, Sitecore.Speak.Client">
                    <files hint="raw:AddMainJs">
                        <file version="2" path="/sitecore/shell/client/Applications/Publishing/publishing-deps-config.json" />
                    </files>
                </processor>
            </speak.client.buildMainJS>

            <!-- 
      # Publisher End Result Pipeline
      
      This pipeline is called from publishingservice:publishend event handler which subscribes to the publish end event. Publish results will 
      be passed to this pipeline in batches. The size of the batch is defined by 'manifestResultLoadBatchSize' parameter specified within
      the publishingservice:publishend configuration section.
      -->
            <publishEndResultBatch argsType="Sitecore.Publishing.Service.Pipelines.BulkPublishingEnd.PublishEndResultBatchArgs">
                <processor type="Sitecore.Publishing.Service.Pipelines.BulkPublishingEnd.RaiseRemoteEvents, Sitecore.Publishing.Service">
                    <!-- The number maximum number of manifest steps for a publishing target below which Sitecore Remote Item Events are
                 added to the publishing target Event Queue table. Exceeding this threshold will raise cache clearing events instead.
                 !Warning: Too low a value could have a significant impact on the performance of the delivery instance. -->
                    <param name="remoteEventCacheClearingThreshold">1000</param>
                    <param name="targetCacheClearHistory" ref="publishing.service/targetCacheClearHistory" />
                </processor>
            </publishEndResultBatch>
        </pipelines>
    </sitecore>
</configuration>